package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate p;
    private DbIterator child1, child2;
    private TupleDesc td1, td2 , tdMerged;
    private ArrayList<Tuple> mergedTups = new ArrayList<Tuple>();
    private Map<Object, ArrayList<Tuple>> data = new HashMap<Object, ArrayList<Tuple>>();
    private Tuple tuple1 = null;
    private Tuple tuple2 = null;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        td1 = child1.getTupleDesc();
        td2 = child2.getTupleDesc();
        tdMerged = TupleDesc.merge(td1,td2);
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return tdMerged;
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
	return td1.getFieldName(p.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        return td2.getFieldName(p.getField2());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        child1.open();
        child2.open();
        while(child2.hasNext()){
            Tuple tuple = child2.next();
            Field field2 = tuple.getField(p.getField2());
            if(data.containsKey(field2)){
                List list = data.get(field2);
                list.add(tuple);
            } else {
                data.put(field2, new ArrayList<>(Arrays.asList(tuple)));
            }
        }
    }

    public void close() {
        super.close();
        tuple1 = null;
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
    }

    transient Iterator<Tuple> listIt = null;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if(listIt!=null && listIt.hasNext()){
            tuple2 = listIt.next();
            Tuple tuple3 = new Tuple(tdMerged);
            int td1NumFields = td1.numFields();
            for (int i = 0; i < td1NumFields; i++)
                tuple3.setField(i, tuple1.getField(i));
            for (int i = td1NumFields; i < tdMerged.numFields(); i++)
                tuple3.setField(i, tuple2.getField(i - td1NumFields));
            return tuple3;
        }
        while(child1.hasNext()){
            tuple1 = child1.next();
            Field field1 = tuple1.getField(p.getField1());
            if(data.containsKey(field1)){
                listIt = data.get(field1).iterator();
            } else {
                continue;
            }
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return null;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    }
    
}
